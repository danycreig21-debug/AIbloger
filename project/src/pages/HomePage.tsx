import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import BlogCard from '../components/BlogCard';
import StatusIndicator from '../components/StatusIndicator';
import { Bot, TrendingUp, Users, FileText, RefreshCw } from 'lucide-react';

interface Blog {
  id: string;
  title: string;
  content: string;
  summary: string | null;
  slug: string;
  category: string;
  tags: string[];
  view_count: number;
  like_count: number;
  created_at: string;
  published_at: string | null;
  author_id: string;
}

export default function HomePage() {
  const [blogs, setBlogs] = useState<Blog[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingSummary, setIsGeneratingSummary] = useState<string | null>(null);
  const [stats, setStats] = useState({
    totalBlogs: 0,
    totalViews: 0,
    totalComments: 0,
    todayBlogs: 0
  });

  useEffect(() => {
    fetchBlogs();
    fetchStats();
  }, []);

  const fetchBlogs = async () => {
    try {
      const { data, error } = await supabase
        .from('blogs')
        .select('*')
        .eq('status', 'published')
        .order('published_at', { ascending: false })
        .limit(12);

      if (error) throw error;
      setBlogs(data || []);
    } catch (error) {
      console.error('Error fetching blogs:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      // Get total blogs
      const { count: totalBlogs } = await supabase
        .from('blogs')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'published');

      // Get total views
      const { data: viewsData } = await supabase
        .from('blogs')
        .select('view_count')
        .eq('status', 'published');

      const totalViews = viewsData?.reduce((sum, blog) => sum + blog.view_count, 0) || 0;

      // Get total comments
      const { count: totalComments } = await supabase
        .from('comments')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'approved');

      // Get today's blogs
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const { count: todayBlogs } = await supabase
        .from('blogs')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'published')
        .gte('published_at', today.toISOString());

      setStats({
        totalBlogs: totalBlogs || 0,
        totalViews,
        totalComments: totalComments || 0,
        todayBlogs: todayBlogs || 0
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleSummarize = async (blogId: string) => {
    setIsGeneratingSummary(blogId);
    
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/summarize-blog`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ blogId }),
      });

      if (response.ok) {
        // Refresh blogs to show the new summary
        fetchBlogs();
      }
    } catch (error) {
      console.error('Error generating summary:', error);
    } finally {
      setIsGeneratingSummary(null);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="flex items-center space-x-2">
          <RefreshCw className="h-6 w-6 animate-spin text-indigo-600" />
          <span className="text-lg font-medium text-gray-700">Loading blogs...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center">
            <div className="flex items-center justify-center mb-4">
              <Bot className="h-12 w-12 text-indigo-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              AI-Powered Blog Hub
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Discover fresh content generated by artificial intelligence every 5 minutes. 
              Experience the future of automated blogging with intelligent engagement.
            </p>
          </div>
        </div>
      </div>

      {/* Stats Section */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-indigo-100">
                <FileText className="h-6 w-6 text-indigo-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-semibold text-gray-900">{stats.totalBlogs}</p>
                <p className="text-sm text-gray-600">Total Blogs</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-emerald-100">
                <TrendingUp className="h-6 w-6 text-emerald-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-semibold text-gray-900">{stats.totalViews}</p>
                <p className="text-sm text-gray-600">Total Views</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-orange-100">
                <Users className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-semibold text-gray-900">{stats.totalComments}</p>
                <p className="text-sm text-gray-600">Comments</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-purple-100">
                <Bot className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-semibold text-gray-900">{stats.todayBlogs}</p>
                <p className="text-sm text-gray-600">Today's Posts</p>
              </div>
            </div>
          </div>
        </div>

        {/* System Status */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <StatusIndicator
            status="active"
            label="Blog Generation"
            lastUpdate="2 minutes ago"
          />
          <StatusIndicator
            status="active"
            label="Comment Bot"
            lastUpdate="1 minute ago"
          />
          <StatusIndicator
            status="active"
            label="Social Media Automation"
            lastUpdate="5 minutes ago"
          />
        </div>

        {/* Latest Blogs */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Latest Blog Posts</h2>
          {blogs.length === 0 ? (
            <div className="text-center py-12">
              <Bot className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-lg text-gray-600">No blogs yet. The AI is working on creating fresh content!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {blogs.map((blog) => (
                <BlogCard
                  key={blog.id}
                  blog={blog}
                  onSummarize={handleSummarize}
                  isGeneratingSummary={isGeneratingSummary === blog.id}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}